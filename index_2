<!DOCTYPE html>
<html lang="fr">
<head>
<!-- Firebase App (the core Firebase SDK) -->
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<!-- Firebase Auth -->
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
<!-- Firebase Firestore -->
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>

<script>
// Votre configuration Firebase (remplacez par celle obtenue à l'étape précédente)
const firebaseConfig = {
  apiKey: "AIzaSyCrvRv5dxD4bwlVoMsX2BnKTzp58UdOg2g",
  authDomain: "votre-projet.firebaseapp.com",
  projectId: "votre-projet",
  storageBucket: "votre-projet.appspot.com",
  messagingSenderId: "votre-messaging-sender-id",
  appId: "votre-app-id"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
</script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Les 100 premiers Alaniens</title>
    
    <!-- Inclure React (version production) -->
    <script src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
    
    <!-- Inclure PapaParse pour le traitement CSV -->
    <script src="https://unpkg.com/papaparse@5.3.0/papaparse.min.js"></script>
    
    <!-- Métadonnées pour le partage social -->
    <meta property="og:title" content="Les 100 premiers Alaniens">
    <meta property="og:description" content="Jeu de devinettes sur les employés d'Alan">
    <meta property="og:type" content="website">
    
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f9fafb;
        }
        #root {
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <!-- Le code du jeu -->
    <script>
        // Destructurer les éléments React nécessaires
        const { useState, useEffect, useRef } = React;

        // Données complètes des employés
        const donneesBrutes = `employee_id,first_name,last_name,original_start_date,community,role,first_initial,last_initial
0,Jean-Charles,Samuelian,"1 Jan, 2016",Co-founders,CEO,J,S
1,Charles,Gorintin,"1 Jan, 2016",Co-founders,CTO,C,G
3,Antoine,Lizee,"9 May, 2016",Data,Full Stack Data Scientist,A,L
4,Robert,Zyskowski,"23 May, 2016",Engineering,Software Engineer,R,Z
6,Paul,Sauveplane,"20 Jun, 2016",Market and Bet Owners,Alaner Experience Lead,P,S
8,Fabrice,Staad,"1 Aug, 2016",Market and Bet Owners,Unit Lead - France,F,S
10,Kevin,Aserraf,"6 Mar, 2017",Marketing,Product Marketing,K,A
13,Olivier,Sambourg,"6 Jun, 2017",Engineering,Software Engineer,O,S
15,James,Whitbeck,"4 Sep, 2017",Engineering,Software Engineer,J,W
19,Leo,Andres,"8 Jan, 2018",Care,Care Crew Lead,L,A
23,Vincent,Brachet,"9 Apr, 2018",Sales,Sales Crew Lead,V,B
22,Clement,Mennesson,"4 Jun, 2018",Product Management,Product Manager,C,M
24,Thomas,Rolf,"18 Jun, 2018",Product Management,Community Lead,T,R
28,Marie,Hardel,"2 Jul, 2018",Care,Community Lead,M,H
34,Cyril,Vinot,"3 Jul, 2018",Data,Full Stack Data Scientist,C,V
46,Benjamin,Benouarka,"24 Sep, 2018",IT,IT Ops Specialist,B,B
44,Marion,Doumeingts,"1 Oct, 2018",Design and Research,Product Designer,M,D
57,Eleonore,Adrian,"1 Oct, 2018",Sales,Sales Crew Lead,E,A
38,Laurane,Maitrel,"8 Oct, 2018",Product Management,Product Manager,L,M
47,Julien,Chenat,"15 Oct, 2018",Design and Research,Product Designer,J,C
60,Naïm,Smutz,"22 Oct, 2018",Care,Product Specialist,N,S
45,Lucie,Leflour,"29 Oct, 2018",Sales,Sales Lead,L,L
51,Chloe,Legrand,"12 Nov, 2018",Care,Care Ops,C,L
61,Mihaela,Albu,"12 Nov, 2018",Finance,Community Lead,M,A
65,Berangere,Giraud,"21 Nov, 2018",Care,Customer Support Specialist - Entreprise,B,G
55,Antoine,Moulet,"1 Dec, 2018",Product Management,Product Manager,A,M
64,Augustin,Mine,"7 Jan, 2019",Market and Bet Owners,Community Lead,A,M
58,Jean,Barloy,"14 Jan, 2019",Engineering,Software Engineer,J,B
66,Thierry,Godfroid,"4 Feb, 2019",Engineering,Software Engineer,T,G
77,Victor,Dancette,"1 Apr, 2019",Sales,Sales Crew Lead,V,D
84,Claire,Lacroix,"1 Apr, 2019",Operations,Ops Coordinator,C,L
83,Ariane,Bayat,"15 Apr, 2019",Sales,Sales Crew Lead,A,B
70,Paulo,Gemelgo,"6 May, 2019",Insurance,Insurance Business,P,G
86,Thomas,Mollard,"20 May, 2019",Engineering,Software Engineer,T,M
102,Stephane,Soulier,"20 May, 2019",Data,Full Stack Data Scientist,S,S
82,Antoine,Jackson,"17 Jun, 2019",Engineering,Software Engineer,A,J
97,Flavie,de The,"17 Jun, 2019",Data,Full Stack Data Scientist,F,d
87,Remi,Schockmel,"1 Jul, 2019",Sales,Sales Crew Lead,R,S
94,Guillaume,Nevoux,"1 Jul, 2019",IT,IT Ops Specialist,G,N
100,Remy-Christophe,Schermesser,"1 Jul, 2019",Engineering,Engineering Unit Referent,R,S
112,Charles,Dusser,"1 Jul, 2019",Business Strategy and Operations,Community Lead,C,D
99,Simon,Perre,"15 Jul, 2019",Operations,Ops Builder,S,P
123,Clemence,Collon,"19 Aug, 2019",Operations,Ops Coordinator,C,C
131,Fanette,Lopez,"19 Aug, 2019",Care,Knowledge Specialist,F,L
117,Thomas,Repichet,"2 Sep, 2019",Sales,Sales Crew Lead,T,R
120,Pierre-Yves,Caneill,"2 Sep, 2019",Engineering,Software Engineer,P,C
116,Lorraine,Pipart,"16 Sep, 2019",Operations,Ops Coordinator,L,P
128,Alexandre,Gerlic,"16 Sep, 2019",Engineering,Community Lead,A,G
114,Clement,Sixdenier,"7 Oct, 2019",Sales,Account Manager,C,S
121,David,Merckle,"7 Oct, 2019",Engineering,Engineering Unit Referent,D,M
132,Manon,Trabuc,"7 Oct, 2019",People,People Ops,M,T
143,Florian,Gagnadre,"7 Oct, 2019",Engineering,Software Engineer,F,G
149,Lucie,Paladino,"7 Oct, 2019",Workplace,Community Lead,L,P
134,Vincent,Perrot,"21 Oct, 2019",Operations,Ops Coordinator,V,P
154,Maxence,Bouret,"21 Oct, 2019",Engineering,Software Engineer,M,B
122,Lucie,Touchais,"4 Nov, 2019",People,People Growth,L,T
137,Heloïse,Poras,"4 Nov, 2019",Operations,Ops Coordinator,H,P
155,Sophie,Bussieres Cauberghs,"4 Nov, 2019",Operations,Community Lead,S,B
141,Julie,Rossi,"18 Nov, 2019",Engineering,Software Engineer,J,R
152,Ludovic,Bauple,"20 Nov, 2019",Sales,Revenue Lead,L,B
138,Caroline,Carre,"2 Dec, 2019",Care,Care Crew Lead,C,C
159,Juliette,Raimbault,"2 Dec, 2019",People,Community Lead,J,R
163,Maryline,Lefebvre,"16 Dec, 2019",Operations,Ops Coordinator,M,L
168,Laure,Bonnefoi,"16 Dec, 2019",Care,Product Specialist,L,B
178,Lea,Vallerian,"16 Dec, 2019",Operations,Ops Coordinator,L,V
145,Ujala,Anis,"20 Jan, 2020",Design and Research,Community Lead,U,A
166,Caroline,Boudard,"3 Feb, 2020",Care,Product Specialist,C,B
181,Thomas,Dudouet,"3 Feb, 2020",Engineering,Software Engineer,T,D
179,Anastasia,Melnichenko,"17 Feb, 2020",Design and Research,Product Designer,A,M
172,Marc,Faget,"2 Mar, 2020",Finance,Finance,M,F
201,Romain,Stourm,"6 Apr, 2020",Sales,Sales Crew Lead,R,S
204,Donatien,Laplace,"6 Apr, 2020",Sales,Account Executive,D,L
216,Gregoire,Roussel,"6 Apr, 2020",Sales,Account Executive,G,R
193,Maxime,Robinet,"4 May, 2020",Design and Research,Product Designer,M,R
195,Emilie,Quellec,"4 May, 2020",Sales,Account Executive,E,Q
196,Thomas,Porez,"4 May, 2020",Data,Full Stack Data Scientist,T,P
197,Timna,Ehrmann,"4 May, 2020",Data,Full Stack Data Scientist,T,E
221,Brecht,Verhamme,"4 May, 2020",Operations,Ops Builder,B,V
223,Mohamed Ghazi,Benabid,"18 May, 2020",Business Strategy and Operations,Sales Strategist,M,B
227,Marie-Helene,Stoltz,"18 May, 2020",Business Strategy and Operations,CRM manager,M,S
236,Thibault,Devalle-Predieri,"18 May, 2020",Sales,Account Executive,T,D
210,Mathieu,Ghaleb,"1 Jun, 2020",Engineering,Software Engineer,M,G
237,Victor,Boutin,"1 Jun, 2020",Sales,Account Executive,V,B
235,Laurent,Guerin,"15 Jun, 2020",Insurance,Community Lead,L,G
242,Marion,Bergeret,"15 Jun, 2020",Corporate,Corporate Lead,M,B
245,Simon,Verlaque,"15 Jun, 2020",Business Strategy and Operations,Sales Strategist,S,V
247,Vincent,Poulain,"15 Jun, 2020",Engineering,Software Engineer,V,P
230,Thomas,Quinot,"6 Jul, 2020",Corporate,Information security lead / CISO,T,Q
249,Estelle,Pasteau,"20 Jul, 2020",Talent,Talent,E,P
258,Tristan,du Boys,"20 Jul, 2020",Operations,Ops Coordinator,T,d
234,Theo,Sermet,"17 Aug, 2020",Insurance,Insurance Products,T,S
248,Sebastien,de Larquier,"17 Aug, 2020",Data,Community Lead,S,d
240,Aurelie,Fliedel,"31 Aug, 2020",Marketing,Community Lead,A,F
257,David,Rousselie,"31 Aug, 2020",Engineering,Software Engineer,D,R
261,Alfredo,Schoch,"31 Aug, 2020",Operations,Ops Builder,A,S
259,Sebastien,Fredeau,"14 Sep, 2020",Market and Bet Owners,Unit Lead - Belgium,S,F
251,Josephine,Gaillet,"28 Sep, 2020",Care,Care Ops,J,G
254,Dries,Stevens,"28 Sep, 2020",Sales,Sales Lead,D,S
255,Nicolas,Zermati,"26 Oct, 2020",Engineering,Software Engineer,N,Z
164,Lea,Vaude,"3 Sep, 2024",Sales,Customer Success Manager,L,V`;

        // Fonction pour télécharger un fichier CSV
        function triggerUserFileDownload(options) {
            const { content, filename } = options;
            const blob = new Blob([content], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Fonction de calcul de la distance de Levenshtein (mesure de similarité entre deux chaînes)
        function levenshteinDistance(a, b) {
            const matrix = [];
            
            // Incrémente
            function increment(i, j) {
                return matrix[i][j] + 1;
            }
            
            // Insertion
            function insertion(i, j) {
                return matrix[i][j - 1] + 1;
            }
            
            // Substitution
            function substitution(i, j) {
                return matrix[i - 1][j - 1] + (a[i - 1] !== b[j - 1] ? 1 : 0);
            }
            
            // Initialisation de la matrice
            for (let i = 0; i <= a.length; i++) {
                matrix[i] = [i];
            }
            
            for (let j = 1; j <= b.length; j++) {
                matrix[0][j] = j;
            }
            
            // Remplissage de la matrice
            for (let i = 1; i <= a.length; i++) {
                for (let j = 1; j <= b.length; j++) {
                    matrix[i][j] = Math.min(
                        increment(i - 1, j),     // suppression
                        insertion(i, j),         // insertion
                        substitution(i, j)       // substitution
                    );
                }
            }
            
            return matrix[a.length][b.length];
        }

        // Calcule la similarité entre deux chaînes (entre 0 et 1)
        function calculateSimilarity(str1, str2) {
            const maxLength = Math.max(str1.length, str2.length);
            if (maxLength === 0) return 1.0; // Si les deux chaînes sont vides, elles sont identiques
            
            const distance = levenshteinDistance(str1, str2);
            return 1.0 - distance / maxLength;
        }

        // Composant principal
        function App() {
	// États pour l'authentification
const [user, setUser] = useState(null);
const [email, setEmail] = useState("");
const [password, setPassword] = useState("");
const [isSigningUp, setIsSigningUp] = useState(false);
const [authError, setAuthError] = useState("");
const [leaderboard, setLeaderboard] = useState([]);

// Surveiller l'état de l'authentification
useEffect(() => {
  const unsubscribe = firebase.auth().onAuthStateChanged((currentUser) => {
    if (currentUser) {
      setUser(currentUser);
      // Charger les scores depuis Firestore
      loadLeaderboard();
    } else {
      setUser(null);
    }
  });
  
  return () => unsubscribe();
}, []);

// Fonction de connexion
const signIn = async (e) => {
  e.preventDefault();
  setAuthError("");
  
  try {
    await firebase.auth().signInWithEmailAndPassword(email, password);
  } catch (error) {
    setAuthError(error.message);
  }
};

// Fonction d'inscription
const signUp = async (e) => {
  e.preventDefault();
  setAuthError("");
  
  try {
    await firebase.auth().createUserWithEmailAndPassword(email, password);
  } catch (error) {
    setAuthError(error.message);
  }
};

// Fonction de déconnexion
const signOut = async () => {
  await firebase.auth().signOut();
};

// Fonction pour charger le classement
const loadLeaderboard = async () => {
  try {
    const snapshot = await firebase.firestore()
      .collection('scores')
      .orderBy('score', 'desc')
      .limit(10)
      .get();
    
    const scores = [];
    snapshot.forEach(doc => {
      scores.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    setLeaderboard(scores);
  } catch (error) {
    console.error("Error loading leaderboard:", error);
  }
};

// Fonction pour sauvegarder le score
const saveScore = async () => {
  if (!user) return;
  
  try {
    // Vérifier si l'utilisateur a déjà un score
    const userScoreRef = firebase.firestore()
      .collection('scores')
      .where('userId', '==', user.uid);
    
    const snapshot = await userScoreRef.get();
    
    if (snapshot.empty) {
      // Créer un nouveau score
      await firebase.firestore().collection('scores').add({
        userId: user.uid,
        email: user.email,
        score: stats.score,
        discovered: stats.discovered,
        total: stats.total,
        timestamp: firebase.firestore.FieldValue.serverTimestamp()
      });
    } else {
      // Mettre à jour le score existant si le nouveau score est plus élevé
      const docId = snapshot.docs[0].id;
      const currentScore = snapshot.docs[0].data().score;
      
      if (stats.score > currentScore) {
        await firebase.firestore().collection('scores').doc(docId).update({
          score: stats.score,
          discovered: stats.discovered,
          timestamp: firebase.firestore.FieldValue.serverTimestamp()
        });
      }
    }
    
    // Recharger le classement
    loadLeaderboard();
  } catch (error) {
    console.error("Error saving score:", error);
  }
};
            const [employes, setEmployes] = useState([]);
            const [employesCharges, setEmployesCharges] = useState(false);
            const [recherche, setRecherche] = useState("");
            const [message, setMessage] = useState("");
            const [stats, setStats] = useState({ total: 0, decouverts: 0, score: 0 });
            const [indicesActives, setIndicesActives] = useState({
                communaute: false,
                role: false,
                initiales: false
            });
            
            // Seuil de similarité pour la correspondance approximative (0.8 = 80% de similarité)
            const [seuilSimilarite, setSeuilSimilarite] = useState(0.8);
            
            // États pour le timer
            const [jeuCommence, setJeuCommence] = useState(false);
            const [tempsRestant, setTempsRestant] = useState(3600); // 1 heure en secondes
            const [jeuTermine, setJeuTermine] = useState(false);
            const timerRef = useRef(null);
            
            // Référence pour maintenir la position de défilement
            const scrollPositionRef = useRef(0);

            // Charger les données au démarrage
            useEffect(() => {
                // Parser le CSV
                Papa.parse(donneesBrutes, {
                    header: true,
                    skipEmptyLines: true,
                    complete: function(results) {
                        // Transformer les données
                        const donnees = results.data.map(function(employe) {
                            return {
                                id: employe.employee_id,
                                prenom: employe.first_name,
                                nom: employe.last_name,
                                dateDebut: employe.original_start_date,
                                communaute: employe.community,
                                role: employe.role,
                                initialePrenom: employe.first_initial,
                                initialeNom: employe.last_initial,
                                longueurNom: employe.last_name.length,
                                decouvert: false
                            };
                        });
                        
                        // Trier les employés par ID
                        donnees.sort(function(a, b) {
                            return parseInt(a.id) - parseInt(b.id);
                        });
                        
                        setEmployes(donnees);
                        setStats({ total: donnees.length, decouverts: 0, score: 0 });
                        
                        setEmployesCharges(true);
                    }
                });
            }, []);

// Timer management
useEffect(() => {
    if (gameStarted && !gameEnded) {
        timerRef.current = setInterval(function() {
            setTimeRemaining(function(prev) {
                if (prev <= 1) {
                    clearInterval(timerRef.current);
                    setGameEnded(true);
                    
                    // Reveal all answers when time is up
                    setEmployees(function(prevEmployees) {
                        return prevEmployees.map(function(employee) {
                            return {
                                ...employee,
                                discovered: true
                            };
                        });
                    });
                    
                    // Sauvegarder le score dans Firebase
                    saveScore();
                    
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);
    }
    
    return function() {
        if (timerRef.current) {
            clearInterval(timerRef.current);
        }
    };
}, [gameStarted, gameEnded]);

            // Commencer le jeu
            function commencerJeu() {
                setJeuCommence(true);
                setTempsRestant(3600); // 1 heure
                setJeuTermine(false);
                
                // Réinitialiser les employés découverts
                setEmployes(function(prevEmployes) {
                    return prevEmployes.map(function(employe) {
                        return {
                            ...employe,
                            decouvert: false
                        };
                    });
                });
                
                setStats(function(prev) { 
                    return { ...prev, decouverts: 0, score: 0 };
                });
            }

            // Formater le temps restant
            function formaterTemps(secondes) {
                const minutes = Math.floor(secondes / 60);
                const secondesRestantes = secondes % 60;
                return `${minutes.toString().padStart(2, '0')}:${secondesRestantes.toString().padStart(2, '0')}`;
            }

            // Trouver le meilleur match pour un nom recherché
            function trouverMeilleurMatch(nomRecherche) {
                let meilleurMatch = null;
                let meilleureSimilarite = 0;
                
                employes.forEach(function(employe) {
                    if (!employe.decouvert) {
                        const similarite = calculateSimilarity(
                            nomRecherche.toLowerCase(),
                            employe.nom.toLowerCase()
                        );
                        
                        if (similarite > meilleureSimilarite && similarite >= seuilSimilarite) {
                            meilleureSimilarite = similarite;
                            meilleurMatch = employe;
                        }
                    }
                });
                
                return { employe: meilleurMatch, similarite: meilleureSimilarite };
            }

            // Gérer la soumission du formulaire sans défilement
            function verifierNom(e) {
                e.preventDefault();
                
                // Sauvegarder la position de défilement actuelle
                scrollPositionRef.current = window.scrollY;
                
                if (!jeuCommence || jeuTermine) {
                    setMessage(jeuTermine ? "Le temps est écoulé ! Toutes les réponses sont révélées. Cliquez sur 'Recommencer' pour jouer à nouveau." : "Cliquez sur 'Commencer' pour démarrer le jeu.");
                    return;
                }
                
                if (!recherche.trim()) {
                    setMessage("Veuillez entrer un nom");
                    return;
                }
                
                const nomRecherche = recherche.trim().toLowerCase();
                
                // Vérifier si le nom est exactement le même
                const employeExact = employes.find(
                    function(e) { return e.nom.toLowerCase() === nomRecherche && !e.decouvert; }
                );
                
                // Si pas de correspondance exacte, chercher le meilleur match
                if (!employeExact) {
                    const { employe: meilleurMatch, similarite } = trouverMeilleurMatch(nomRecherche);
                    
                    if (meilleurMatch) {
                        // Trouver un match approximatif
                        let pointsGagnes = 10; // Par défaut, 10 points sans indices
                        
                        // Calculer les points en fonction des indices utilisés
                        if (indicesActives.communaute && indicesActives.role && indicesActives.initiales) {
                            pointsGagnes = 1; // 1 point avec tous les indices
                        } else if ((indicesActives.communaute && indicesActives.role) || 
                                (indicesActives.communaute && indicesActives.initiales) || 
                                (indicesActives.role && indicesActives.initiales)) {
                            pointsGagnes = 3; // 3 points avec deux indices
                        } else if (indicesActives.communaute || indicesActives.role || indicesActives.initiales) {
                            pointsGagnes = 5; // 5 points avec un seul indice
                        }
                        
                        // Réduire légèrement les points pour les correspondances approximatives
                        pointsGagnes = Math.round(pointsGagnes * similarite);
                        
                        setStats(function(prev) { 
                            return { 
                                ...prev, 
                                decouverts: prev.decouverts + 1,
                                score: prev.score + pointsGagnes
                            };
                        });
                        
                        // Mettre à jour l'employé comme découvert
                        setEmployes(function(prev) {
                            return prev.map(function(e) {
                                return e.nom === meilleurMatch.nom ? { ...e, decouvert: true } : e;
                            });
                        });
                        
                        setMessage(`Bravo ! Vous avez trouvé un employé avec un nom similaire : "${meilleurMatch.prenom} ${meilleurMatch.nom}" (${Math.round(similarite * 100)}% de similarité). +${pointsGagnes} points !`);
                        setRecherche("");
                        
                        // Restaurer la position de défilement après le rendu
                        setTimeout(function() {
                            window.scrollTo(0, scrollPositionRef.current);
                        }, 0);
                        
                        return;
                    }
                    
                    // Vérifier si l'employé a déjà été découvert
                    const employeDejaDecouvert = employes.find(
                        function(e) { return e.nom.toLowerCase() === nomRecherche && e.decouvert; }
                    );
                    
                    if (employeDejaDecouvert) {
                        setMessage(`Vous avez déjà découvert ${employeDejaDecouvert.prenom} ${employeDejaDecouvert.nom}.`);
                    } else {
                        setMessage(`Aucun employé trouvé avec le nom "${recherche}".`);
                    }
                    
                    setRecherche("");
                    
                    // Restaurer la position de défilement après le rendu
                    setTimeout(function() {
                        window.scrollTo(0, scrollPositionRef.current);
                    }, 0);
                    
                    return;
                }
                
                // Correspondance exacte trouvée
                let pointsGagnes = 10; // Par défaut, 10 points sans indices
                
                // Calculer les points en fonction des indices utilisés
                if (indicesActives.communaute && indicesActives.role && indicesActives.initiales) {
                    pointsGagnes = 1; // 1 point avec tous les indices
                } else if ((indicesActives.communaute && indicesActives.role) || 
                        (indicesActives.communaute && indicesActives.initiales) || 
                        (indicesActives.role && indicesActives.initiales)) {
                    pointsGagnes = 3; // 3 points avec deux indices
                } else if (indicesActives.communaute || indicesActives.role || indicesActives.initiales) {
                    pointsGagnes = 5; // 5 points avec un seul indice
                }
                
                setStats(function(prev) { 
                    return { 
                        ...prev, 
                        decouverts: prev.decouverts + 1,
                        score: prev.score + pointsGagnes
                    };
                });
                
                // Mettre à jour l'employé comme découvert
                setEmployes(function(prev) {
                    return prev.map(function(e) {
                        return e === employeExact ? { ...e, decouvert: true } : e;
                    });
                });
                
                setMessage(`Bravo ! Vous avez trouvé ${employeExact.prenom} ${employeExact.nom}. +${pointsGagnes} points !`);
                setRecherche("");
                
                // Restaurer la position de défilement après le rendu
                setTimeout(function() {
                    window.scrollTo(0, scrollPositionRef.current);
                }, 0);
            }

            // Activer/désactiver les indices
            function toggleIndice(indice) {
                if (!jeuCommence || jeuTermine) return;
                
                setIndicesActives(function(prev) {
                    const newState = { ...prev };
                    newState[indice] = !prev[indice];
                    return newState;
                });
            }

            // Réinitialiser le jeu
            function reinitialiser() {
                if (timerRef.current) {
                    clearInterval(timerRef.current);
                }
                
                setEmployes(employes.map(function(e) { return { ...e, decouvert: false }; }));
                setStats({ total: employes.length, decouverts: 0, score: 0 });
                setIndicesActives({ communaute: false, role: false, initiales: false });
                setJeuCommence(false);
                setJeuTermine(false);
                setTempsRestant(3600);
                setMessage("Jeu réinitialisé !");
            }

            // Exporter les données sous format CSV
            function exporterCSV() {
                const header = "employee_id,first_name,last_name,original_start_date,community,role,first_initial,last_initial\n";
                const lignes = employes.map(function(e) {
                    return `${e.id},${e.prenom},${e.nom},${e.dateDebut},${e.communaute},${e.role},${e.initialePrenom},${e.initialeNom}`;
                }).join("\n");
                
                const contenu = header + lignes;
                
                triggerUserFileDownload({
                    content: contenu,
                    filename: "100_premiers_alaniens.csv"
                });
            }

            // Modifier le seuil de similarité
            function changerSeuilSimilarite(e) {
                setSeuilSimilarite(parseFloat(e.target.value));
            }
// Si l'utilisateur n'est pas connecté, afficher le formulaire de connexion
if (!user) {
  return React.createElement(
    "div",
    {
      style: {
        maxWidth: '400px',
        margin: '50px auto',
        padding: '20px',
        borderRadius: '8px',
        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
        backgroundColor: 'white'
      }
    },
    [
      // Titre
      React.createElement(
        "h1",
        {
          style: {
            textAlign: 'center',
            marginBottom: '24px',
            color: '#1e40af'
          }
        },
        "Do you really know your fellow Alaners?"
      ),
      
      // Message d'erreur
      authError && React.createElement(
        "div",
        {
          style: {
            padding: '10px',
            backgroundColor: '#fee2e2',
            color: '#b91c1c',
            borderRadius: '4px',
            marginBottom: '16px'
          }
        },
        authError
      ),
      
      // Formulaire
      React.createElement(
        "form",
        {
          onSubmit: isSigningUp ? signUp : signIn
        },
        [
          // Email
          React.createElement(
            "div",
            { style: { marginBottom: '16px' } },
            [
              React.createElement(
                "label",
                { style: { display: 'block', marginBottom: '4px', fontWeight: '500' } },
                "Email"
              ),
              React.createElement(
                "input",
                {
                  type: "email",
                  value: email,
                  onChange: (e) => setEmail(e.target.value),
                  required: true,
                  style: {
                    width: '100%',
                    padding: '8px',
                    borderRadius: '4px',
                    border: '1px solid #d1d5db'
                  }
                }
              )
            ]
          ),
          
          // Password
          React.createElement(
            "div",
            { style: { marginBottom: '24px' } },
            [
              React.createElement(
                "label",
                { style: { display: 'block', marginBottom: '4px', fontWeight: '500' } },
                "Password"
              ),
              React.createElement(
                "input",
                {
                  type: "password",
                  value: password,
                  onChange: (e) => setPassword(e.target.value),
                  required: true,
                  style: {
                    width: '100%',
                    padding: '8px',
                    borderRadius: '4px',
                    border: '1px solid #d1d5db'
                  }
                }
              )
            ]
          ),
          
          // Bouton de connexion
          React.createElement(
            "button",
            {
              type: "submit",
              style: {
                width: '100%',
                padding: '10px',
                backgroundColor: '#3b82f6',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                fontWeight: '500',
                cursor: 'pointer'
              }
            },
            isSigningUp ? "Sign Up" : "Sign In"
          ),
          
          // Lien pour basculer entre connexion et inscription
          React.createElement(
            "div",
            {
              style: {
                marginTop: '16px',
                textAlign: 'center',
                color: '#4b5563'
              }
            },
            [
              isSigningUp ? "Already have an account? " : "Don't have an account? ",
              React.createElement(
                "a",
                {
                  href: "#",
                  onClick: (e) => {
                    e.preventDefault();
                    setIsSigningUp(!isSigningUp);
                  },
                  style: {
                    color: '#3b82f6',
                    textDecoration: 'none'
                  }
                },
                isSigningUp ? "Sign In" : "Sign Up"
              )
            ]
          )
        ]
      )
    ]
  );
}

            // Afficher un message de chargement si les données ne sont pas encore chargées
            if (!employesCharges) {
                return React.createElement(
                    "div", 
                    { style: { display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' } },
                    React.createElement(
                        "div", 
                        { style: { fontSize: '1.25rem', color: '#4b5563' } },
                        "Chargement des données..."
                    )
                );
            }

            // Le reste du rendu avec React.createElement au lieu de JSX
            return React.createElement(
                "div",
                { 
                    style: { 
                        maxWidth: '800px', 
                        margin: '0 auto', 
                        padding: '20px',
                        fontFamily: 'Arial, sans-serif'
                    }
                },
                [
                    // Titre
                    React.createElement(
                        "h1",
                        { 
                            key: "title",
                            style: { 
                                fontSize: '2.5rem', 
                                fontWeight: 'bold', 
                                marginBottom: '1.5rem', 
                                textAlign: 'center',
                                color: 'black'
                            }
                        },
                        "Les 100 premiers Alaniens"
                    ),
                    
                    // Instructions
                    React.createElement(
                        "div",
                        {
                            key: "instructions",
                            style: {
                                marginBottom: '1.5rem',
                                padding: '1rem',
                                backgroundColor: '#f0f9ff',
                                borderRadius: '0.5rem',
                                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                            }
                        },
                        [
                            React.createElement(
                                "h2",
                                {
                                    style: { fontSize: '1.25rem', fontWeight: '600', marginBottom: '0.5rem' }
                                },
                                "Comment jouer :"
                            ),
                            React.createElement(
                                "ol",
                                { style: { paddingLeft: '1.5rem' } },
                                [
                                    React.createElement("li", { key: "instr1" }, "Devinez le nom de famille d'un des 100 premiers employés d'Alan"),
                                    React.createElement("li", { key: "instr2" }, [
                                        React.createElement("strong", null, "10 points"),
                                        " par nom trouvé sans indice"
                                    ]),
                                    React.createElement("li", { key: "instr3" }, [
                                        "Utilisez les boutons d'indices pour vous aider :",
                                        React.createElement(
                                            "ul",
                                            { style: { paddingLeft: '1.5rem', marginTop: '0.25rem', listStyleType: 'circle' } },
                                            [
                                                React.createElement("li", { key: "hint1" }, [
                                                    "Avec 1 indice : ",
                                                    React.createElement("strong", null, "5 points"),
                                                    " par nom trouvé"
                                                ]),
                                                React.createElement("li", { key: "hint2" }, [
                                                    "Avec 2 indices : ",
                                                    React.createElement("strong", null, "3 points"),
                                                    " par nom trouvé"
                                                ]),
                                                React.createElement("li", { key: "hint3" }, [
                                                    "Avec 3 indices : ",
                                                    React.createElement("strong", null, "1 point"),
                                                    " par nom trouvé"
                                                ])
                                            ]
                                        )
                                    ]),
                                    React.createElement("li", { key: "instr4" }, "Les orthographes approximatives sont acceptées"),
                                    React.createElement("li", { key: "instr5" }, [
                                        "Vous avez ",
                                        React.createElement("strong", null, "1 heure"),
                                        " pour trouver un maximum de noms !"
                                    ])
                                ]
                            ),
                            
                            !jeuCommence && !jeuTermine ? React.createElement(
                                "div",
                                { style: { textAlign: 'center', marginTop: '1rem' } },
                                React.createElement(
                                    "button",
                                    {
                                        onClick: commencerJeu,
                                        style: {
                                            backgroundColor: '#3b82f6',
                                            color: 'white',
                                            padding: '0.75rem 1.5rem',
                                            borderRadius: '0.375rem',
                                            fontWeight: 'bold',
                                            fontSize: '1.125rem',
                                            border: 'none',
                                            cursor: 'pointer',
                                            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
                                        }
                                    },
                                    "Commencer"
                                )
                            ) : null
                        ]
                    ),
                    
                    // Timer
                    React.createElement(
                        "div",
                        {
                            key: "timer",
                            style: {
                                marginBottom: '1.5rem',
                                padding: '0.75rem',
                                backgroundColor: jeuTermine ? '#fee2e2' : '#f0f9ff',
                                borderRadius: '0.5rem',
                                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                                display: 'flex',
                                justifyContent: 'center',
                                alignItems: 'center',
                                gap: '1rem'
                            }
                        },
                        [
                            React.createElement(
                                "div",
                                { 
                                    style: { 
                                        fontSize: '2rem', 
                                        fontWeight: 'bold',
                                        color: jeuTermine ? '#b91c1c' : (tempsRestant < 300 ? '#b91c1c' : '#1e40af')
                                    }
                                },
                                formaterTemps(tempsRestant)
                            ),
                            
                            jeuCommence ? React.createElement(
                                "div",
                                { 
                                    style: { 
                                        fontSize: '1rem',
                                        color: jeuTermine ? '#b91c1c' : 'inherit'
                                    }
                                },
                                jeuTermine ? "Temps écoulé !" : "Temps restant"
                            ) : null
                        ]
                    ),
                    
                    // Formulaire de recherche
                    React.createElement(
                        "div",
                        {
                            key: "search-form",
                            style: { 
                                marginBottom: '1.5rem', 
                                position: 'sticky', 
                                top: '0', 
                                zIndex: '10', 
                                backgroundColor: 'white', 
                                padding: '10px 0' 
                            }
                        },
                        [
                            React.createElement(
                                "form",
                                {
                                    onSubmit: verifierNom,
                                    style: { display: 'flex', gap: '0.5rem' }
                                },
                                [
                                    React.createElement(
                                        "input",
                                        {
                                            type: "text",
                                            value: recherche,
                                            onChange: function(e) { setRecherche(e.target.value); },
                                            placeholder: "Entrez un nom de famille...",
                                            disabled: !jeuCommence || jeuTermine,
                                            style: { 
                                                flex: '1',
                                                padding: '0.5rem',
                                                border: '1px solid #d1d5db',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                opacity: (!jeuCommence || jeuTermine) ? 0.7 : 1
                                            }
                                        }
                                    ),
                                    React.createElement(
                                        "button",
                                        {
                                            type: "submit",
                                            disabled: !jeuCommence || jeuTermine,
                                            style: {
                                                backgroundColor: '#3b82f6',
                                                color: 'white',
                                                padding: '0.5rem 1rem',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                border: 'none',
                                                cursor: 'pointer',
                                                opacity: (!jeuCommence || jeuTermine) ? 0.7 : 1
                                            }
                                        },
                                        "Vérifier"
                                    )
                                ]
                            ),
                            
                            message ? React.createElement(
                                "div",
                                {
                                    style: {
                                        marginTop: '0.5rem',
                                        padding: '0.5rem',
                                        borderRadius: '0.375rem',
                                        backgroundColor: message.includes('Bravo') ? '#dcfce7' : '#f3f4f6',
                                        color: message.includes('Bravo') ? '#166534' : 'inherit'
                                    }
                                },
                                message
                            ) : null
                        ]
                    ),
                    
                    // Statistiques et contrôles
                    React.createElement(
                        "div",
                        {
                            key: "stats-controls",
                            style: {
                                marginBottom: '1rem',
                                padding: '0.75rem',
                                backgroundColor: '#f9fafb',
                                borderRadius: '0.5rem',
                                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                                display: 'flex',
                                flexWrap: 'wrap',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                                gap: '0.75rem'
                            }
                        },
                        [
                            // Statistiques
                            React.createElement(
                                "div",
                                { style: { fontWeight: '500' } },
                                [
                                    React.createElement(
                                        "div",
                                        null,
                                        `Progrès : ${stats.decouverts} / ${stats.total} employés découverts`
                                    ),
                                    React.createElement(
                                        "div",
                                        { style: { fontSize: '1.125rem', fontWeight: '700' } },
                                        `Score : ${stats.score} points`
                                    )
                                ]
                            ),
// Leaderboard
React.createElement(
  "div",
  {
    key: "leaderboard",
    style: {
      marginBottom: '1.5rem',
      padding: '1rem',
      backgroundColor: '#f0f9ff',
      borderRadius: '0.5rem',
      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
    }
  },
  [
    // Titre du classement
    React.createElement(
      "h2",
      {
        style: {
          fontSize: '1.25rem',
          fontWeight: '600',
          marginBottom: '0.75rem',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }
      },
      [
        "Leaderboard",
        React.createElement(
          "button",
          {
            onClick: loadLeaderboard,
            style: {
              backgroundColor: '#3b82f6',
              color: 'white',
              padding: '0.25rem 0.5rem',
              fontSize: '0.875rem',
              borderRadius: '0.25rem',
              border: 'none',
              cursor: 'pointer'
            }
          },
          "Refresh"
        )
      ]
    ),
    
    // Tableau du classement
    React.createElement(
      "div",
      {
        style: {
          overflowX: 'auto'
        }
      },
      React.createElement(
        "table",
        {
          style: {
            width: '100%',
            borderCollapse: 'collapse'
          }
        },
        [
          // En-tête du tableau
          React.createElement(
            "thead",
            null,
            React.createElement(
              "tr",
              {
                style: {
                  borderBottom: '2px solid #e5e7eb'
                }
              },
              [
                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Rank"),
                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Player"),
                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'right' } }, "Score"),
                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'right' } }, "Names Found")
              ]
            )
          ),
          
          // Corps du tableau
          React.createElement(
            "tbody",
            null,
            leaderboard.length > 0 ? 
              leaderboard.map((entry, index) => 
                React.createElement(
                  "tr",
                  {
                    key: entry.id,
                    style: {
                      backgroundColor: user && entry.userId === user.uid ? '#f0fdf4' : 'transparent',
                      borderBottom: '1px solid #e5e7eb'
                    }
                  },
                  [
                    // Rang
                    React.createElement(
                      "td",
                      { style: { padding: '0.5rem', fontWeight: '500' } },
                      `#${index + 1}`
                    ),
                    // Joueur (email)
                    React.createElement(
                      "td",
                      { style: { padding: '0.5rem' } },
                      entry.email.split('@')[0] // Affiche seulement la partie avant @
                    ),
                    // Score
                    React.createElement(
                      "td",
                      { style: { padding: '0.5rem', textAlign: 'right', fontWeight: '700' } },
                      entry.score
                    ),
                    // Noms trouvés
                    React.createElement(
                      "td",
                      { style: { padding: '0.5rem', textAlign: 'right' } },
                      `${entry.discovered || 0}/${entry.total || stats.total}`
                    )
                  ]
                )
              ) :
              React.createElement(
                "tr",
                null,
                React.createElement(
                  "td",
                  {
                    colSpan: 4,
                    style: {
                      padding: '1rem',
                      textAlign: 'center',
                      color: '#6b7280'
                    }
                  },
                  "No scores yet. Be the first to play!"
                )
              )
          )
        ]
      )
    )
  ]
)
                            
                            // Boutons d'indices
                            React.createElement(
                                "div",
                                { style: { display: 'flex', flexWrap: 'wrap', gap: '0.5rem' } },
                                [
                                    // Indice : Communauté
                                    React.createElement(
                                        "button",
                                        {
                                            onClick: function() { toggleIndice('communaute'); },
                                            disabled: !jeuCommence || jeuTermine,
                                            style: {
                                                padding: '0.25rem 0.75rem',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                backgroundColor: indicesActives.communaute ? '#fef9c3' : '#e5e7eb',
                                                color: indicesActives.communaute ? '#854d0e' : 'inherit',
                                                border: 'none',
                                                cursor: 'pointer',
                                                opacity: (!jeuCommence || jeuTermine) ? 0.7 : 1
                                            }
                                        },
                                        indicesActives.communaute ? 'Masquer communauté' : 'Indice : Communauté'
                                    ),
                                    
                                    // Indice : Rôle
                                    React.createElement(
                                        "button",
                                        {
                                            onClick: function() { toggleIndice('role'); },
                                            disabled: !jeuCommence || jeuTermine,
                                            style: {
                                                padding: '0.25rem 0.75rem',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                backgroundColor: indicesActives.role ? '#fef9c3' : '#e5e7eb',
                                                color: indicesActives.role ? '#854d0e' : 'inherit',
                                                border: 'none',
                                                cursor: 'pointer',
                                                opacity: (!jeuCommence || jeuTermine) ? 0.7 : 1
                                            }
                                        },
                                        indicesActives.role ? 'Masquer rôle' : 'Indice : Rôle'
                                    ),
                                    
                                    // Indice : Initiales
                                    React.createElement(
                                        "button",
                                        {
                                            onClick: function() { toggleIndice('initiales'); },
                                            disabled: !jeuCommence || jeuTermine,
                                            style: {
                                                padding: '0.25rem 0.75rem',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                backgroundColor: indicesActives.initiales ? '#fef9c3' : '#e5e7eb',
                                                color: indicesActives.initiales ? '#854d0e' : 'inherit',
                                                border: 'none',
                                                cursor: 'pointer',
                                                opacity: (!jeuCommence || jeuTermine) ? 0.7 : 1
                                            }
                                        },
                                        indicesActives.initiales ? 'Masquer initiales' : 'Indice : Initiales'
                                    )
                                ]
                            ),
                            
                            // Contrôles (boutons)
                            React.createElement(
                                "div",
                                { style: { display: 'flex', flexWrap: 'wrap', gap: '0.5rem' } },
                                [
                                    // Bouton réinitialiser/recommencer
                                    React.createElement(
                                        "button",
                                        {
                                            onClick: reinitialiser,
                                            style: {
                                                backgroundColor: '#e5e7eb',
                                                padding: '0.25rem 0.75rem',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                border: 'none',
                                                cursor: 'pointer'
                                            }
                                        },
                                        jeuTermine ? "Recommencer" : "Réinitialiser"
                                    ),

// Bouton de déconnexion
React.createElement(
  "button",
  {
    onClick: signOut,
    style: {
      backgroundColor: '#ef4444',
      color: 'white',
      padding: '0.25rem 0.75rem',
      borderRadius: '0.375rem',
      boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
      border: 'none',
      cursor: 'pointer'
    }
  },
  "Sign Out"
)
                                    
                                    // Bouton exporter CSV
                                    React.createElement(
                                        "button",
                                        {
                                            onClick: exporterCSV,
                                            style: {
                                                backgroundColor: '#22c55e',
                                                color: 'white',
                                                padding: '0.25rem 0.75rem',
                                                borderRadius: '0.375rem',
                                                boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)',
                                                border: 'none',
                                                cursor: 'pointer'
                                            }
                                        },
                                        "Exporter CSV"
                                    )
                                ]
                            )
                        ]
                    ),
                    
                    // Réglage de la sensibilité
                    React.createElement(
                        "div",
                        {
                            key: "sensitivity",
                            style: {
                                marginBottom: '1.5rem',
                                padding: '0.75rem',
                                backgroundColor: '#f0f9ff',
                                borderRadius: '0.5rem',
                                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                            }
                        },
                        [
                            React.createElement(
                                "div",
                                { style: { marginBottom: '0.5rem', fontWeight: '500' } },
                                `Sensibilité de correspondance : ${Math.round(seuilSimilarite * 100)}%`
                            ),
                            React.createElement(
                                "input",
                                {
                                    type: "range",
                                    min: "0.5",
                                    max: "0.95",
                                    step: "0.05",
                                    value: seuilSimilarite,
                                    onChange: changerSeuilSimilarite,
                                    style: { width: '100%' }
                                }
                            ),
                            React.createElement(
                                "div",
                                { style: { display: 'flex', justifyContent: 'space-between', fontSize: '0.875rem', color: '#6b7280' } },
                                [
                                    React.createElement("span", null, "Plus flexible"),
                                    React.createElement("span", null, "Plus strict")
                                ]
                            )
                        ]
                    ),
                    
                    // Liste des employés triée par ID
                    React.createElement(
                        "div",
                        {
                            key: "employee-list",
                            style: { 
                                border: '1px solid #e5e7eb',
                                borderRadius: '0.5rem',
                                overflow: 'hidden',
                                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                                backgroundColor: 'white'
                            }
                        },
                        [
                            // Titre
                            React.createElement(
                                "div",
                                {
                                    style: {
                                        backgroundColor: '#1f2937',
                                        color: 'white',
                                        fontWeight: 'bold',
                                        padding: '0.75rem'
                                    }
                                },
                                `Liste des employés (${employes.length})`
                            ),
                            
                            // Tableau des employés
                            React.createElement(
                                "table",
                                { style: { width: '100%', borderCollapse: 'collapse' } },
                                [
                                    // En-tête du tableau
                                    React.createElement(
                                        "thead",
                                        null,
                                        React.createElement(
                                            "tr",
                                            { style: { backgroundColor: 'rgba(243, 244, 246, 0.8)' } },
                                            [
                                                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "ID"),
                                                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Date début"),
                                                indicesActives.communaute && React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Communauté"),
                                                indicesActives.role && React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Rôle"),
                                                indicesActives.initiales && React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Initiales"),
                                                React.createElement("th", { style: { padding: '0.5rem', textAlign: 'left' } }, "Nom complet")
                                            ].filter(Boolean) // Filtre les éléments null
                                        )
                                    ),
                                    
                                    // Corps du tableau
                                    React.createElement(
                                        "tbody",
                                        null,
                                        employes.map(function(employe, idx) {
                                            return React.createElement(
                                                "tr",
                                                {
                                                    key: idx,
                                                    style: { 
                                                        backgroundColor: idx % 2 === 0 ? 'white' : 'rgba(249, 250, 251, 0.8)'
                                                    }
                                                },
                                                [
                                                    React.createElement("td", { style: { padding: '0.5rem' } }, employe.id),
                                                    React.createElement("td", { style: { padding: '0.5rem' } }, employe.dateDebut),
                                                    indicesActives.communaute && React.createElement("td", { style: { padding: '0.5rem' } }, employe.communaute),
                                                    indicesActives.role && React.createElement("td", { style: { padding: '0.5rem' } }, employe.role),
                                                    indicesActives.initiales && React.createElement(
                                                        "td",
                                                        { style: { padding: '0.5rem' } },
                                                        `${employe.initialePrenom}. ${employe.initialeNom}.`
                                                    ),
                                                    React.createElement(
                                                        "td",
                                                        { style: { padding: '0.5rem' } },
                                                        employe.decouvert 
                                                            ? React.createElement("span", { style: { fontWeight: '500' } }, `${employe.prenom} ${employe.nom}`)
                                                            : React.createElement("span", { style: { color: '#9ca3af' } }, "● ●")
                                                    )
                                                ].filter(Boolean) // Filtre les éléments null
                                            );
                                        })
                                    )
                                ]
                            )
                        ]
                    ),
                    
                    // Message de fin de jeu
                    jeuTermine && React.createElement(
                        "div",
                        {
                            key: "game-over",
                            style: {
                                margin: '20px 0',
                                padding: '1rem',
                                backgroundColor: '#fee2e2',
                                borderRadius: '0.5rem',
                                textAlign: 'center',
                                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                            }
                        },
                        [
                            React.createElement(
                                "h2",
                                { style: { fontSize: '1.5rem', fontWeight: 'bold', color: '#b91c1c' } },
                                "Temps écoulé !"
                            ),
                            React.createElement(
                                "p",
                                { style: { marginTop: '0.5rem' } },
                                [
                                    "Vous avez trouvé ",
                                    React.createElement("strong", null, stats.decouverts),
                                    ` employés sur ${stats.total} et marqué `,
                                    React.createElement("strong", null, stats.score),
                                    " points."
                                ]
                            ),
                            React.createElement(
                                "p",
                                { style: { marginTop: '0.5rem', fontStyle: 'italic' } },
                                "Toutes les réponses ont été révélées. Vous pouvez explorer la liste complète."
                            ),
                            React.createElement(
                                "button",
                                {
                                    onClick: reinitialiser,
                                    style: {
                                        marginTop: '1rem',
                                        backgroundColor: '#3b82f6',
                                        color: 'white',
                                        padding: '0.5rem 1rem',
                                        borderRadius: '0.375rem',
                                        fontWeight: 'bold',
                                        border: 'none',
                                        cursor: 'pointer'
                                    }
                                },
                                "Rejouer"
                            )
                        ]
                    )
                ]
            );
        }

        // Rendu de l'application
        ReactDOM.render(React.createElement(App), document.getElementById('root'));
    </script>
</body>
</html>
